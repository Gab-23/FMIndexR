roxygen2::roxygenise()
devtools::check()
library(BiocCheck)
BiocCheck()
devtools::build()
FMIndexR::BackwardSearch()
?BackwardSearch
roxygen2::roxygenise()
devtools::check()
this.dir <- this.path::this.dir()
this.dir <- this.path::this.dir()
input_path <- '../SCIPROject/R_Proj/files_pre_pacchetto/Input_Files/INS.txt'
output_path <- '../SCIPROject/R_Proj/files_pre_pacchetto/Output_Files/'
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
BackwardSearch(FM, 'AGG')
View(FM)
BackwardSearch(FM, 'AGCCC')
BackwardSearch(FM, 'AGCCX')
BackwardSearch(FM, 'AGCCCCCCC')
BackwardSearch(FM, '')
BackwardSearch(FM)
BackwardSearch(FM, ' ')
nchar('')
BackwardSearch(FM, 'AG')
BackwardSearch(3, 'AG')
BackwardSearch(FM, 3)
BackwardSearch(FM, 'AG')
?FM_index_from_FASTA
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
input_path <- '../SCIPROject/R_Proj/files_pre_pacchetto/Input_Files/INS.txt'
output_path <- '../SCIPROject/R_Proj/files_pre_pacchetto/Output_Files/'
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
BackwardSearch(FM, 'AG')
this.dir <- this.path::this.dir()
this.dir <- this.path::this.dir()
FM_index_from_FASTA <- function(input, output, save = TRUE){
SuffixArray <- function(input_string) {
if (typeof(input_string) != 'character') {
stop('ERROR! Input sequence MUST be a string')
} else if (nchar(input_string) == 0) {
stop('ERROR! Empty sequence detected!')
} else {
special_char <- '$'
complete_string <- paste(input_string,special_char, sep = '', collapse = '')
complete_string_length <- nchar(complete_string)
idx_array <- 0:(complete_string_length-1)
suffix_array <- sapply(X = idx_array, function(i){
actual_idx <- i
used_idx <- i + 1
suffix <- substr(complete_string, used_idx,complete_string_length)})
suffix_df <- data.frame(idx = idx_array,
suffix = suffix_array)
sorted_suffix_df <- suffix_df[order(suffix_array),]
rownames(sorted_suffix_df) <- 0:(nrow(sorted_suffix_df)-1)
class(sorted_suffix_df) <- c('SuffixArray','data.frame')
return(sorted_suffix_df)
}}
BWTransform <- function(suffix_array) {
logical <- any(class(suffix_array) != c('SuffixArray','data.frame'))
if (logical) {
stop('ERROR! Input MUST be a data.frame of class SuffixArray, use the dedicated function!')
} else {
original_sequence <- suffix_array[suffix_array$idx == 0,2]
actual_idx <- suffix_array$idx
used_idx <- ifelse(actual_idx == 0, nchar(original_sequence),actual_idx)
BWT <- sapply(X = used_idx, function(i){
idx <- i
substr(original_sequence,idx,idx)})
BWT <- paste(BWT, sep = '', collapse = '')
class(BWT) <- c('BWT','character')
return(BWT)
}}
OccMatrix <- function(bwt) {
logical <- any(class(bwt) != c('BWT','character'))
if (logical) {
stop('ERROR! Input MUST be a string of class BWT, use the dedicated function!')
} else {
length_bwt <- nchar(bwt)
bwt_letters <- strsplit(bwt, split = '')[[1]]
unique_bwt_letters <- unique(bwt_letters)
sorted_unique_bwt_letters <- sort(unique_bwt_letters)
Occ_df <- data.frame(matrix(data = NA, nrow = length_bwt, ncol = length(sorted_unique_bwt_letters)))
colnames(Occ_df) <- sorted_unique_bwt_letters
for (char in colnames(Occ_df)) {
idx_vector <- which(bwt_letters == char)
Occ_df[idx_vector,char] <- 1:length(idx_vector)
count_vec <- Occ_df[,char]
count_vec <- zoo::na.locf(count_vec, na.rm = FALSE)
count_vec[is.na(count_vec)] <- 0
Occ_df[,char] <- count_vec
}
rownames(Occ_df) <- 0:(nrow(Occ_df)-1)
class(Occ_df) <- c('Occ','data.frame')
return(Occ_df)
}}
CountArray <- function(bwt) {
logical <- any(class(bwt) != c('BWT','character'))
if (logical) {
stop('ERROR! Input MUST be a string of class BWT, use the dedicated function!')
} else {
bwt_char <- sort(unique((strsplit(bwt, split = '')[[1]])))
sorted_bwt <- sort(strsplit(bwt, split = '')[[1]])
count_df <- data.frame(matrix(data = NA, nrow = 1, ncol = length(bwt_char)))
colnames(count_df) <- bwt_char
for (char in bwt_char) {
df_idx <- which(colnames(count_df) == char)
char_idx <- which(sorted_bwt == char)[1] - 1
count_df[1,df_idx] <- char_idx
}
rownames(count_df) <- 0
class(count_df) <- c('C','data.frame')
return(count_df)
}}
fasta_data <- tryCatch({Biostrings::readDNAStringSet(input)},
warning = function(w)
{stop('Non standard symbols detected in FASTA file!')})
if (length(fasta_data) > 1) {
stop('ERROR! multiFASTA files are not accepted!')
} else {
fasta_sequence <- as.character(fasta_data)
fasta_sequence <- toupper(fasta_sequence)
fasta_sequence_header <- names(fasta_data)
fasta_sequence_header_path <- paste(output, 'name.txt', sep = '', collapse = '')
print('FASTA sequence correctly read!')
suffix_array <- SuffixArray(fasta_sequence)
suffix_array_path <- paste(output, 'suffix_array.txt', sep = '', collapse = '')
print('Suffix Array created!')
BWT <- BWTransform(suffix_array)
BWT_path <- paste(output, 'BWT.txt', sep = '', collapse = '')
print('BWT created!')
occ_matrix <- OccMatrix(BWT)
occ_matrix_path <- paste(output, 'occ_matrix.txt', sep = '', collapse = '')
print('Occ matrix created!')
c_array <- CountArray(BWT)
c_array_path <- paste(output, 'c_array.txt', sep = '', collapse = '')
print('C Array created!')
if (save) {
writeLines(fasta_sequence_header, con = fasta_sequence_header_path)
write.table(suffix_array, file = suffix_array_path, sep = '\t', row.names = FALSE)
writeLines(BWT, con = BWT_path)
write.table(occ_matrix, file = occ_matrix_path, sep = '\t', row.names = FALSE)
write.table(c_array, file = c_array_path, sep = '\t', row.names = FALSE)
}
FM_index <- list(fasta_sequence_header,suffix_array,BWT,occ_matrix,c_array)
names(FM_index) <- c('SequenceName','SuffixArray', 'BWT', 'Occ', 'CountArray')
class(FM_index) <- 'FM_index'
return(FM_index)
}}
BackwardSearch <- function(FM_index, pattern, store_elems = FALSE) {
if (typeof(pattern) != 'character' | (nchar(pattern) == 0)) {
stop('ERROR! Pattern MUST be a non-empty string')
} else {
logical_1 <- class(FM_index) != 'FM_index'
if (logical_1) {
stop('ERROR! FM index MUST be of class FM_index!')
} else {
SA <- FM_index$SuffixArray
BWT <- FM_index$BWT
Occ <- FM_index$Occ
C <- FM_index$CountArray
SA$no_money <-substr(SA$suffix, 1, nchar(SA$suffix) - 1)
original_sequence <- SA[SA$idx == 0,]$suffix
original_sequence <- substr(original_sequence, 1, nchar(original_sequence) - 1)
original_sequence_array <- strsplit(original_sequence, split = '')[[1]]
pattern <- toupper(pattern)
reversed_pattern <- IRanges::reverse(pattern)
reversed_pattern_array <- strsplit(reversed_pattern, split = '')[[1]]
logical_2 <- length(setdiff(reversed_pattern_array,original_sequence_array)) > 0
if (logical_2) {
return('Pattern NOT found')
}
if (any(SA$no_money == pattern)) {
match <- which(SA$no_money == pattern)
match <- rownames(SA)[match]
} else {match <- ''}
start <- 1
end <- (nchar(BWT)-1)
for (char in reversed_pattern_array) {
start <- C[as.character(0),char] + Occ[as.character(start-1),char]
end <- C[as.character(0),char] + Occ[as.character(end),char] -1
if ((start > end) & (nchar(match) == 0)) {
return('Pattern NOT found')
break
}
}
if (nchar(match) != 0) {
start <- as.integer(match)}
final_range <- as.character((start):(end))
num_pattern <- length(final_range)
indexes <- sort(as.vector(SA[final_range,]$idx))
indexes_str <- paste(indexes, collapse = ", ")
if (nchar(original_sequence) <= 3000) {
print(paste('Original Sequence: ', original_sequence, sep = ''))
}
print(paste(num_pattern, ' pattern(s) found', sep = ''))
print(paste('Index(es): ', indexes_str, sep = ''))
if (store_elems) {
return(list(original_sequence,indexes,pattern))
}
}}}
a <- FM_index_from_FASTA(input_path, output_path, FALSE)
input_path <- '../SCIPROject/R_Proj/Input_Files/INS.txt'
output_path <- '../SCIPROject/R_Proj/Output_Files/'
a <- FM_index_from_FASTA(input_path, output_path, FALSE)
b <- BackwardSearch(a, '', TRUE)
b <- BackwardSearch(a, 2, TRUE)
b <- BackwardSearch(a, '', TRUE)
b <- BackwardSearch(a, 'a', TRUE)
a$Occ$A
input_path <- '../SCIPROject/R_Proj/files_pre_pacchetto/Input_Files/INS.txt'
output_path <- '../SCIPROject/R_Proj/files_pre_pacchetto/Output_Files/'
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
BiocCheck::BiocCheck()
devtools::build()
devtools::check()
input_path <- '../SCIPROject/R_Proj/files_pre_pacchetto/Input_Files/INS.txt'
output_path <- '../SCIPROject/R_Proj/files_pre_pacchetto/Output_Files/'
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
input_path <- '../SCIPROject/R_Proj/Input_Files/INS.txt'
output_path <- '../SCIPROject/R_Proj/Output_Files/'
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
BackwardSearch(FM, '')
roxygen2::roxygenise()
input_path <- '../SCIPROject/R_Proj/Input_Files/INS.txt'
output_path <- '../SCIPROject/R_Proj/Output_Files/'
FM_index_from_FASTA <- function(input, output, save = TRUE){
SuffixArray <- function(input_string) {
if (typeof(input_string) != 'character') {
stop('ERROR! Input sequence MUST be a string')
} else if (nchar(input_string) == 0) {
stop('ERROR! Empty sequence detected!')
} else {
special_char <- '$'
complete_string <- paste(input_string,special_char, sep = '', collapse = '')
complete_string_length <- nchar(complete_string)
idx_array <- 0:(complete_string_length-1)
suffix_array <- sapply(X = idx_array, function(i){
actual_idx <- i
used_idx <- i + 1
suffix <- substr(complete_string, used_idx,complete_string_length)})
suffix_df <- data.frame(idx = idx_array,
suffix = suffix_array)
sorted_suffix_df <- suffix_df[order(suffix_array),]
rownames(sorted_suffix_df) <- 0:(nrow(sorted_suffix_df)-1)
class(sorted_suffix_df) <- c('SuffixArray','data.frame')
return(sorted_suffix_df)
}}
BWTransform <- function(suffix_array) {
logical <- any(class(suffix_array) != c('SuffixArray','data.frame'))
if (logical) {
stop('ERROR! Input MUST be a data.frame of class SuffixArray, use the dedicated function!')
} else {
original_sequence <- suffix_array[suffix_array$idx == 0,2]
actual_idx <- suffix_array$idx
used_idx <- ifelse(actual_idx == 0, nchar(original_sequence),actual_idx)
BWT <- sapply(X = used_idx, function(i){
idx <- i
substr(original_sequence,idx,idx)})
BWT <- paste(BWT, sep = '', collapse = '')
class(BWT) <- c('BWT','character')
return(BWT)
}}
OccMatrix <- function(bwt) {
logical <- any(class(bwt) != c('BWT','character'))
if (logical) {
stop('ERROR! Input MUST be a string of class BWT, use the dedicated function!')
} else {
length_bwt <- nchar(bwt)
bwt_letters <- strsplit(bwt, split = '')[[1]]
unique_bwt_letters <- unique(bwt_letters)
sorted_unique_bwt_letters <- sort(unique_bwt_letters)
Occ_df <- data.frame(matrix(data = NA, nrow = length_bwt, ncol = length(sorted_unique_bwt_letters)))
colnames(Occ_df) <- sorted_unique_bwt_letters
for (char in colnames(Occ_df)) {
idx_vector <- which(bwt_letters == char)
Occ_df[idx_vector,char] <- 1:length(idx_vector)
count_vec <- Occ_df[,char]
count_vec <- zoo::na.locf(count_vec, na.rm = FALSE)
count_vec[is.na(count_vec)] <- 0
Occ_df[,char] <- count_vec
}
rownames(Occ_df) <- 0:(nrow(Occ_df)-1)
class(Occ_df) <- c('Occ','data.frame')
return(Occ_df)
}}
CountArray <- function(bwt) {
logical <- any(class(bwt) != c('BWT','character'))
if (logical) {
stop('ERROR! Input MUST be a string of class BWT, use the dedicated function!')
} else {
bwt_char <- sort(unique((strsplit(bwt, split = '')[[1]])))
sorted_bwt <- sort(strsplit(bwt, split = '')[[1]])
count_df <- data.frame(matrix(data = NA, nrow = 1, ncol = length(bwt_char)))
colnames(count_df) <- bwt_char
for (char in bwt_char) {
df_idx <- which(colnames(count_df) == char)
char_idx <- which(sorted_bwt == char)[1] - 1
count_df[1,df_idx] <- char_idx
}
rownames(count_df) <- 0
class(count_df) <- c('C','data.frame')
return(count_df)
}}
fasta_data <- tryCatch({Biostrings::readDNAStringSet(input)},
warning = function(w)
{stop('Non standard symbols detected in FASTA file!')})
if (length(fasta_data) > 1) {
stop('ERROR! multiFASTA files are not accepted!')
} else {
fasta_sequence <- as.character(fasta_data)
fasta_sequence <- toupper(fasta_sequence)
fasta_sequence_header <- names(fasta_data)
fasta_sequence_header_path <- paste(output, 'name.txt', sep = '', collapse = '')
print('FASTA sequence correctly read!')
suffix_array <- SuffixArray(fasta_sequence)
suffix_array_path <- paste(output, 'suffix_array.txt', sep = '', collapse = '')
print('Suffix Array created!')
BWT <- BWTransform(suffix_array)
BWT_path <- paste(output, 'BWT.txt', sep = '', collapse = '')
print('BWT created!')
occ_matrix <- OccMatrix(BWT)
occ_matrix_path <- paste(output, 'occ_matrix.txt', sep = '', collapse = '')
print('Occ matrix created!')
c_array <- CountArray(BWT)
c_array_path <- paste(output, 'c_array.txt', sep = '', collapse = '')
print('C Array created!')
if (save) {
writeLines(fasta_sequence_header, con = fasta_sequence_header_path)
write.table(suffix_array, file = suffix_array_path, sep = '\t', row.names = FALSE)
writeLines(BWT, con = BWT_path)
write.table(occ_matrix, file = occ_matrix_path, sep = '\t', row.names = FALSE)
write.table(c_array, file = c_array_path, sep = '\t', row.names = FALSE)
}
FM_index <- list(fasta_sequence_header,suffix_array,BWT,occ_matrix,c_array)
names(FM_index) <- c('SequenceName','SuffixArray', 'BWT', 'Occ', 'CountArray')
class(FM_index) <- 'FM_index'
return(FM_index)
}}
BackwardSearch <- function(FM_index, pattern, store_elems = FALSE) {
if (typeof(pattern) != 'character' | (nchar(pattern) == 0)) {
stop('ERROR! Pattern MUST be a non-empty string')
} else {
logical_1 <- class(FM_index) != 'FM_index'
if (logical_1) {
stop('ERROR! FM index MUST be of class FM_index!')
} else {
SA <- FM_index$SuffixArray
BWT <- FM_index$BWT
Occ <- FM_index$Occ
C <- FM_index$CountArray
SA$no_money <-substr(SA$suffix, 1, nchar(SA$suffix) - 1)
original_sequence <- SA[SA$idx == 0,]$suffix
original_sequence <- substr(original_sequence, 1, nchar(original_sequence) - 1)
original_sequence_array <- strsplit(original_sequence, split = '')[[1]]
pattern <- toupper(pattern)
reversed_pattern <- IRanges::reverse(pattern)
reversed_pattern_array <- strsplit(reversed_pattern, split = '')[[1]]
logical_2 <- length(setdiff(reversed_pattern_array,original_sequence_array)) > 0
if (logical_2) {
return('Pattern NOT found')
}
if (any(SA$no_money == pattern)) {
match <- which(SA$no_money == pattern)
match <- rownames(SA)[match]
} else {match <- ''}
start <- 1
end <- (nchar(BWT)-1)
for (char in reversed_pattern_array) {
start <- C[as.character(0),char] + Occ[as.character(start-1),char]
end <- C[as.character(0),char] + Occ[as.character(end),char] -1
if ((start > end) & (nchar(match) == 0)) {
return('Pattern NOT found')
break
}
}
if (nchar(match) != 0) {
start <- as.integer(match)}
final_range <- as.character((start):(end))
num_pattern <- length(final_range)
indexes <- sort(as.vector(SA[final_range,]$idx))
indexes_str <- paste(indexes, collapse = ", ")
if (nchar(original_sequence) <= 3000) {
print(paste('Original Sequence: ', original_sequence, sep = ''))
}
print(paste(num_pattern, ' pattern(s) found', sep = ''))
print(paste('Index(es): ', indexes_str, sep = ''))
if (store_elems) {
return(list(original_sequence,indexes,pattern))
}
}}}
a <- FM_index_from_FASTA(input_path, output_path, FALSE)
a == FM
b <- BackwardSearch(a, '', TRUE)
b <- FMIndexR::BackwardSearch(a, '', TRUE)
input_path <- '../SCIPROject/R_Proj/Input_Files/INS.txt'
output_path <- '../SCIPROject/R_Proj/Output_Files/'
FM <- FMIndexR::FM_index_from_FASTA(input_path,output_path)
FMIndexR::BackwardSearch(FM, '')
devtools::use_vignette("FMIndexR_vignette")
install.packages(c("usethis", "knitr", "rmarkdown"))
usethis::use_vignette('FMIndexR_vignette')
browseVignettes(package = 'FMIndexR')
devtools::check()
browseVignettes(package = 'FMIndexR')
devtools::build()
browseVignettes(package = 'FMIndexR')
devtools::build_vignettes()
browseVignettes(package = 'FMIndexR')
devtools::build()
browseVignettes(package = 'FMIndexR')
roxygen2::roxygenise()
?FM_index_from_FASTA
pkgload::dev_help('FM_index_from_FASTA')
roxygen2::roxygenise()
?BackwardSearch
roxygen2::roxygenise()
?FM_index_from_FASTA
?BackwardSearch
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgload::dev_help('FM_index_from_FASTA')
devtools::build()
devtools::check('../FMIndexR_0.0.0.9000.tar.gz')
devtools::check('../FMIndexR/')
?FM_index_from_FASTA
?BackwardSearch
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
browseVignettes(package = 'FMIndexR')
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
install.packages('biocViews')
data(biocViewsVocab)
library(biocViews)
data(biocViewsVocab)
View(biocViewsVocab)
biocViewsVocab@nodes
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
